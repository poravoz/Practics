import {
	Hears,
	Start,
	Update
} from 'nestjs-telegraf'
import { actionButtons } from './app.buttons'
import { AppService } from './app.service'
import { Context } from './context.interface'
import { Action } from 'nestjs-telegraf';
import axios from 'axios';

let lastVideoUrl = null;

@Update()
export class AppUpdate {

	constructor(
		private readonly appService: AppService,	
	) {}

	@Start()
	async startCommand(ctx: Context) {
	  await ctx.reply('–ü—Ä–∏–≤—ñ—Ç, —Å—Ç—É–¥–µ–Ω—Ç–µ! üëã');
	  await ctx.reply('–©–æ —Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ —Ö–æ—á–µ—à—å –¥—ñ–∑–Ω–∞—Ç–∏—Å—å ?', actionButtons());
	
	  const response = await axios.get('http://localhost:3000/videos/');
	  const videoUrl = response.data;
	  if (videoUrl !== lastVideoUrl) {
		await ctx.reply(`–ù–∞ –∫–∞–Ω–∞–ª—ñ –Ü–≤–∞–Ω—î—É –Ω–æ–≤–∏–π –≤—ñ–¥–æ—Å, –ø–æ–¥–∏–≤–∏—Å—å –ø–µ—Ä—à–∏–º üòè: ${videoUrl}`);
		lastVideoUrl = videoUrl;
	  } else {
		return "–ù–∞ –∫–∞–Ω–∞–ª—ñ –Ü–≤–∞–Ω—î—É –Ω–æ–≤–∏—Ö –≤—ñ–¥–µ–æ –Ω–µ –≤–∏—Ö–æ–¥–∏–ª–æ üò¢";
	  }
	}

	@Hears('üïê –°–∫—ñ–ª—å–∫–∏ –¥–æ –∫—ñ–Ω—Ü—è –ø–∞—Ä–∏ ?')
	async timeToEnd(ctx: Context) {
	  const timeLeft = await this.appService.calculateTimeLeft();
	  
	  if(timeLeft === '–ô–¥–∏ –¥–æ –¥–æ–º—É, –¥—è–¥—å...') {
		await ctx.reply('–ô–¥–∏ –¥–æ –¥–æ–º—É, –¥—è–¥—å...');
	  } else if(timeLeft !== '–ó–∞—Ä–∞–∑ –ø–µ—Ä–µ—Ä–≤–∞, –¥—É—Ä–Ω–∏–∫—É') {
		await ctx.reply(`–î–æ –∫—ñ–Ω—Ü—è –ø–∞—Ä–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${timeLeft}`);
	  } else {
		await ctx.reply(timeLeft);
	  }

	}
	
	@Hears('üìã –†–æ–∑–∫–ª–∞–¥')
	async schedule(ctx: Context) {
	  const buttons = [
		[{ text: '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', callback_data: 'monday' }],
		[{ text: '–í—ñ–≤—Ç–æ—Ä–æ–∫', callback_data: 'tuesday' }],
		[{ text: '–°–µ—Ä–µ–¥–∞', callback_data: 'wednesday' }],
		[{ text: '–ß–µ—Ç–≤–µ—Ä', callback_data: 'thursday' }],
		[{ text: '–ü º—è—Ç–Ω–∏—Ü—è', callback_data: 'friday' }],

	  ];
	
	  const replyText = '–û–±–µ—Ä–∏ –¥–µ–Ω—å:';
	
	  await ctx.reply(replyText, {
		reply_markup: {
		  inline_keyboard: buttons
		}
	  });

	}

	@Hears('üìñ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è')
	async action(ctx: Context) {
		const scheduleInfo = await this.appService.getActionScheduleInfo();
		const replyText = `–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:\n\n${scheduleInfo}`;
		  await ctx.reply(replyText);
	}

	@Hears('üîé –ö–∞–Ω–∞–ª–∏ –í–∏–∫–ª–∞–¥–∞—á—ñ–≤')
	async SecretButton(ctx: Context) {
		const buttons = [
		[{ text: '–ö–∞–Ω–∞–ª –Ü–≤–∞–Ω—î—É', callback_data: '—Åhannel_ivane' }],
		[{ text: '–ö–∞–Ω–∞–ª –ë–æ—Ä—ñ', callback_data: '—Åhannel_borya' }]
		];

		const replyText = '–Ñ 2 –≤–∏–∫–ª–∞–¥–∞—á–∞ —è–∫—ñ –≤–µ–¥—É—Ç—å —Å–≤–æ—ó YouTube –∫–∞–Ω–∞–ª–∏ —Ç–∏ –º–æ–∂–µ—à—å –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —â–æ –Ω–∞ —Ü–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö üôÇ:';
	
		await ctx.reply(replyText, {
		  reply_markup: {
			inline_keyboard: buttons
		  }
		});
	}
	
	@Action('monday')
	async handleMondaySchedule(ctx: Context) {
	  const scheduleInfo = await this.appService.getMondayScheduleInfo();
	  const replyText = `–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫:\n\n${scheduleInfo}`;
	  await ctx.reply(replyText);
	}
	
	@Action('tuesday')
	async handleTuesdaySchedule(ctx: Context) {
  	  const scheduleInfo = await this.appService.getScheduleInfoByDay('–í—ñ–≤—Ç–æ—Ä–æ–∫');
  	  const replyText = `–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –≤—ñ–≤—Ç–æ—Ä–æ–∫:\n\n${scheduleInfo}`;
  	  await ctx.reply(replyText);
	}

	@Action('wednesday')
	async handleWednesdaySchedule(ctx: Context) {
      const scheduleInfo = await this.appService.getScheduleInfoByDay('–°–µ—Ä–µ–¥–∞');
  	  const replyText = `–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å–µ—Ä–µ–¥—É:\n\n${scheduleInfo}`;
 	 await ctx.reply(replyText);
	}

	@Action('thursday')
	async handleThursdaySchedule(ctx: Context) {
  	  const scheduleInfo = await this.appService.getScheduleInfoByDay('–ß–µ—Ç–≤–µ—Ä–≥');
      const replyText = `–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —á–µ—Ç–≤–µ—Ä:\n\n${scheduleInfo}`;
  	  await ctx.reply(replyText);
	}

	@Action('friday')
	async handleFridaySchedule(ctx: Context) {
  	  const scheduleInfo = await this.appService.getScheduleInfoByDay('–ü\'—è—Ç–Ω–∏—Ü—è');
	  const replyText = `–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –ø º—è—Ç–Ω–∏—Ü—é:\n\n${scheduleInfo}`;
  	  await ctx.reply(replyText);
	}

	@Action('—Åhannel_ivane')
	async handleChannelIvane(ctx: Context) {
		return 'https://www.youtube.com/@devreactor';
	}
	@Action('—Åhannel_borya')
	async handleChannelBorya() {
		return 'https://www.youtube.com/@programmer7947';
	}
	

}


